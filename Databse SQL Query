Code Whole Database
//Books
CREATE TABLE Books (
    book_id SERIAL PRIMARY KEY,
    title VARCHAR(255),
    genre VARCHAR(50),
    published_year INT,
    copies INT
);
//authors
CREATE TABLE Authors (
    author_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    birth_year INT
);
//BookAuthors
CREATE TABLE BookAuthors (
    book_id INT REFERENCES Books(book_id),
    author_id INT REFERENCES Authors(author_id),
    PRIMARY KEY (book_id, author_id)
);
//Member
CREATE TABLE Members (
    member_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    join_date DATE DEFAULT CURRENT_DATE
);
//Loans
CREATE TABLE Loans (
    loan_id SERIAL PRIMARY KEY,
    member_id INT REFERENCES Members(member_id),
    book_id INT REFERENCES Books(book_id),
    loan_date DATE DEFAULT CURRENT_DATE,
    due_date DATE,
    return_date DATE
);
//Insert Test Data
-- Books
INSERT INTO Books (title, genre, published_year, copies) VALUES
('The Alchemist', 'Fiction', 1995, 3),
('1984', 'Dystopian', 1949, 5);

-- Authors
INSERT INTO Authors (name, birth_year) VALUES
('Paulo Coelho', 1947),
('George Orwell', 1903);

-- BookAuthors
INSERT INTO BookAuthors VALUES (1, 1), (2, 2);

-- Members
INSERT INTO Members (name, email) VALUES
('Shuvajit Das', 'shuvajit@example.com'),
('Chandan Pal', 'chandan@example.com');

-- Loans
INSERT INTO Loans (member_id, book_id, loan_date, due_date, return_date) VALUES
(1, 1, '2025-07-01', '2025-07-15', NULL),
(2, 2, '2025-07-05', '2025-07-20', '2025-07-18');

// Views for Borrowed & Overdue Books
//Borrowed Books
CREATE VIEW BorrowedBooks AS
SELECT m.name AS member_name, b.title AS book_title, l.loan_date, l.due_date
FROM Loans l
JOIN Members m ON l.member_id = m.member_id
JOIN Books b ON l.book_id = b.book_id
WHERE l.return_date IS NULL;
//Overdue Books
CREATE VIEW OverdueBooks AS
SELECT m.name AS member_name, b.title AS book_title, l.due_date
FROM Loans l
JOIN Members m ON l.member_id = m.member_id
JOIN Books b ON l.book_id = b.book_id
WHERE l.return_date IS NULL AND l.due_date < CURRENT_DATE;


//Trigger: Due Date Notification
//Create Function
CREATE OR REPLACE FUNCTION notify_due_date()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.due_date < CURRENT_DATE THEN
        RAISE NOTICE 'Loan for book ID % is overdue!', NEW.book_id;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
//Trigger
CREATE TRIGGER trigger_due_date
AFTER INSERT OR UPDATE ON Loans
FOR EACH ROW EXECUTE FUNCTION notify_due_date();

// Reports Using Aggregations and JOINs
//Total Borrowed Books per Member
SELECT m.name, COUNT(l.loan_id) AS total_borrowed
FROM Members m
JOIN Loans l ON m.member_id = l.member_id
GROUP BY m.name;
//Most Popular Books
SELECT b.title, COUNT(l.loan_id) AS borrow_count
FROM Books b
JOIN Loans l ON b.book_id = l.book_id
GROUP BY b.title
ORDER BY borrow_count DESC;













